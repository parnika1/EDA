def bivar_exec(src="", wrk="", oup="", cop="", tnp="", indsn="", resp="", maxmisslmt=75, lvllmt=99.9, timelwlmt="",
               timeuplmt=""):
    """
    :param src: Path to input folder
    :param wrk: Path to Work folder
    :param oup: Path to Output folder
    :param cop: Path to Outcopy folder
    :param tnp: Path to Temporary folder
    :param indsn: Name of the Input Data frame
    :param resp: Name of the Target variable
    :param maxmisslmt: Missing percentage limit. Keep same value from the previous code.(1-100 Scale , Default:75)
    :param lvllmt: Max. percentage distribution of a single level of a variable permissible. (1-100 Scale , Default:99.9)
    :param timelwlmt: Specify Min Date (based on Training Data)
    :param timeuplmt: Specify Max Date (based on Training Data
    :return: Dataframes containing WOE and IV values of variables
    """
    # Check if all the input parameters are properly specified
    if src == "" or wrk == "" or oup == "" or cop == "" or tnp == "" or indsn == "" or resp == "" or maxmisslmt == "" or lvllmt == "" or timelwlmt == "" or timeuplmt == "":
        print("INPUT PARAMETERS ARE NOT SPECIFIED PROPERLY IN FUNCTION CALL!")
        return False

    # import sys library for searching the below location for USD package(s)
    import numpy as np
    import pandas as pd
    from scipy import stats
    import sys
    sys.path.insert(1, r'..\.')
    from Libraries.check_path import check_path
    print("CHECK: IF SPECIFIED PATHS ARE VALID")
    check1 = check_path(src, wrk, oup, cop, tnp)
    if check1:
        try:
            # import columns_dtls
            clmn_dtls = pd.read_pickle(r"{}\{}_clmn_dtls.pkl".format(str(cop), str(indsn)))

            # import uni_miss_dtls
            uni_miss = pd.read_pickle(r"{}\{}_uni_miss.pkl".format(str(cop), str(indsn)))

            # import uni_freq_dtls
            uni_freq = pd.read_pickle(r"{}\{}_uni_freq.pkl".format(str(cop), str(indsn)))

            # import bin_dtls
            bin_dtls = pd.read_pickle(r"{}\{}_bin_dtls.pkl".format(str(wrk), str(indsn)))

            # read input dataframe
            input_df = pd.read_pickle(r"{}\{}.pkl".format(str(src), str(indsn)))

            # read binned dataframe
            binned_df = pd.read_pickle(r"{}\{}_bin.pkl".format(str(wrk), str(indsn)))

            print("Required Dataframes successfully read.")
            print("---------------------------------------------------")
            print("")
        except:
            print("Unable to read required Dataframes!")
            return False
    else:
        return False

    if len(input_df[resp].unique()) != 2:
        print("TARGET VARIABLE DOES NOT BELONG TO BINARY CLASS!")
        return False

    # Bivariate Analysis code starts
    # preparing list for categorical variable
    list1 = list(clmn_dtls[(clmn_dtls.BIVAR_TYPE.isin(["CHAR", "CHAR - BINARY", "CHAR - OTHER"])) & (clmn_dtls.VAR_NAME != resp) & (clmn_dtls.VAR_NAME.isin(uni_miss[uni_miss.MISSING_PERC <= maxmisslmt].VAR_NAME.unique()))].VAR_NAME.unique())
    t1 = uni_freq.fillna('-100').groupby(['VAR_NAME'])['LEVELS'].nunique().reset_index()
    t2 = uni_freq.fillna('-100').groupby(['VAR_NAME'])['PERCENT'].max().reset_index()
    t3 = pd.merge(t1, t2, on="VAR_NAME", how="inner")
    list2 = list(uni_freq[uni_freq.VAR_NAME.isin(t3[(t3.LEVELS > 1) & (t3.PERCENT < lvllmt)].VAR_NAME)].VAR_NAME.unique())
    char_list = list(set(list1).intersection(set(list2)))

    # Prepare binned base dataset-Train
    # Copy ID vars
    bin_df = pd.DataFrame()
    bin_df['OBSERVATION_DATE'] = input_df['OBSERVATION_DATE']
    bin_df['KNID'] = input_df['KNID']

    # Copy character vars
    for x in char_list:
        bin_df[x] = input_df[x]

    # Merging character variables with numerical vars required for Bi-Variate Analysis
    bin_df = pd.merge(bin_df, binned_df, on=['KNID', 'OBSERVATION_DATE'], how="inner")

    # replacing null values with -100
    for x in bin_df.columns.drop(['KNID', 'OBSERVATION_DATE', resp]):
        if bin_df[x].dtype in ('int', 'int32', 'int64', 'float', 'float32', 'float64'):
            bin_df[x].fillna(-100, inplace=True)
        if bin_df[x].dtype == 'object' or bin_df[x].dtype == 'O':
            bin_df[x].fillna("-100", inplace=True)

    # Separate out holdout and train data
    bin_df_train = bin_df[(input_df['OBSERVATION_DATE'] >= "'" + timelwlmt + "''") & (input_df['OBSERVATION_DATE'] <= "'" + timeuplmt + "''")]

    # preparing list of variables for which bivariate is required
    req_list = bin_df_train.columns.drop(['OBSERVATION_DATE', 'KNID', resp])
    len(list(req_list))

    if bin_df_train[resp].dtype == 'object' or bin_df_train[resp].dtype == 'O':
        # Number of Customers where Target=1
        t1 = bin_df_train[bin_df_train[resp] == '1']
        # Number of Customers where Target=0
        t0 = bin_df_train[bin_df_train[resp] == '0']

    elif bin_df_train[resp].dtype in ('int', 'int32', 'int64', 'float', 'float32', 'float64'):
        # Number of Customers where Target=1
        t1 = bin_df_train[bin_df_train[resp] == 1]
        # Number of Customers where Target=0
        t0 = bin_df_train[bin_df_train[resp] == 0]

    else:
        print("ERROR!.CHECK TARGET TYPE!")
        return False

    # Creating WOE stats
    bin_bi_woe = pd.DataFrame()
    for x in req_list:
        a = t1.groupby([x])[resp].count().to_frame()
        a.reset_index(inplace=True)
        a.columns = ['VAR_LEVEL', 'FREQ_1']
        a['CPERCENT_1'] = a['FREQ_1'] / len(t1)
        a['VAR_NAME'] = x

        b = t0.groupby([x])[resp].count().to_frame()
        b.reset_index(inplace=True)
        b.columns = ['VAR_LEVEL', 'FREQ_0']
        b['CPERCENT_0'] = b['FREQ_0'] / len(t0)
        b['VAR_NAME'] = x

        c = pd.merge(a, b, how='inner', on=['VAR_NAME', 'VAR_LEVEL'])
        c['RPERCENT_1'] = c['FREQ_1'] / (c['FREQ_1'] + c['FREQ_0'])
        c['RPERCENT_0'] = c['FREQ_0'] / (c['FREQ_1'] + c['FREQ_0'])
        c['WOE'] = np.log(c['CPERCENT_0'] / c['CPERCENT_1'])
        c['IV'] = (c['CPERCENT_0'] - c['CPERCENT_1']) * c['WOE']
        bin_bi_woe = bin_bi_woe.append(c)

    bin_bi_woe = bin_bi_woe[['VAR_NAME', 'VAR_LEVEL', 'FREQ_0', 'RPERCENT_0', 'CPERCENT_0', 'FREQ_1', 'RPERCENT_1', 'CPERCENT_1', 'WOE','IV']]
    bin_bi_woe.reset_index(inplace=True, drop=True)
    bin_bi_woe = pd.merge(bin_bi_woe, bin_dtls[['BASE_VARNAME', 'VAR_NAME']].drop_duplicates(), how='left',left_on=['VAR_NAME'], right_on=['VAR_NAME'])
    bin_bi_woe.loc[(pd.isnull(bin_bi_woe.BASE_VARNAME)), 'BASE_VARNAME'] = bin_bi_woe['VAR_NAME']
    # Fix BASE_VARNAME for BM variables
    bin_bi_woe['BASE_VARNAME'] = bin_bi_woe['BASE_VARNAME'].str.replace("^BM_?", "", regex=True)

    # Creating IV stats
    bin_bi_iv = bin_bi_woe.groupby(['VAR_NAME', 'BASE_VARNAME'])['IV'].agg(['sum', 'count']).reset_index().rename(
        columns={'sum': 'NET_IV', 'count': 'NLEVELS'})

    # Chisquare test for vars Segm_Ext
    bin_bi_chisq = pd.DataFrame(columns=['VAR_NAME', 'CHI-SQUARE_VAL', 'P-VALUE', 'DOF'])
    for x in req_list:
        temp_df = pd.DataFrame()
        c_table = pd.crosstab(bin_df_train[x], bin_df_train[resp])
        a = stats.chi2_contingency(c_table)[0:3]
        temp_df['CHI-SQUARE_VAL'] = pd.Series(a[0])
        temp_df['P-VALUE'] = pd.Series(a[1])
        temp_df['DOF'] = pd.Series(a[2])
        temp_df['VAR_NAME'] = x
        bin_bi_chisq = bin_bi_chisq.append(temp_df[['VAR_NAME', 'CHI-SQUARE_VAL', 'P-VALUE', 'DOF']])

    # Saving Output
    try:
        # bin_df.to_pickle(r"{}\{}_bin_fn.pkl".format(str(tnp),str(indsn)))
        # del(bin_df)

        bin_bi_woe.to_pickle(r"{}\{}_bi_woe.pkl".format(str(cop), str(indsn)))
        bin_bi_woe.to_excel(r"{}\{}_bi_woe.xlsx".format(str(cop), str(indsn)))

        bin_bi_iv.to_pickle(r"{}\{}_bi_iv.pkl".format(str(cop), str(indsn)))
        bin_bi_iv.to_excel(r"{}\{}_bi_iv.xlsx".format(str(cop), str(indsn)))

        bin_bi_chisq.to_pickle(r"{}\{}_bi_chisq.pkl".format(str(cop), str(indsn)))
        bin_bi_chisq.to_excel(r"{}\{}_bi_chisq.xlsx".format(str(cop), str(indsn)))

        print("Following output files successfully saved in Outcopy folder")
        print("{}_bi_woe".format(str(indsn)))
        print("{}_bi_iv".format(str(indsn)))
        print("{}_bi_chisq".format(str(indsn)))
    except:
        print("Failed to save the output. Please check your output path!")
        return False
